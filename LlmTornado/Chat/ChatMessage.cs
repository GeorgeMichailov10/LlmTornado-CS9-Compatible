using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LlmTornado.ChatFunctions;
using LlmTornado.Code;
using Newtonsoft.Json;

namespace LlmTornado.Chat
{

/// <summary>
///     Chat message sent or received from the API. Includes who is speaking in the "role" and the message text in the
///     "content".
/// </summary>
public class ChatMessage
{
	/// <summary>
	///     Creates an empty <see cref="ChatMessage" />, with <see cref="Role" /> defaulting to
	///     <see cref="ChatMessageRole.User" />
	/// </summary>
	public ChatMessage()
    {
        Role = ChatMessageRoles.User;
        Id = Guid.NewGuid();
    }
	
	/// <summary>
	///     Constructor for a new Chat Message.
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	public ChatMessage(ChatMessageRoles role)
	{
		Role = role;
		Id = Guid.NewGuid();
	}

	/// <summary>
	///     Constructor for a new Chat Message.
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="content">The text to send in the message</param>
	public ChatMessage(ChatMessageRoles role, string content)
    {
        Role = role;
        Content = content;
        Id = Guid.NewGuid();
    }

	/// <summary>
	///     Constructor for a new Chat Message with multiple parts.
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="parts">Parts the message consists of</param>
	public ChatMessage(ChatMessageRoles role, IEnumerable<ChatMessagePart> parts)
    {
        Role = role;
        Parts = parts.ToList();
        Id = Guid.NewGuid();
    }

	/// <summary>
	///     Constructor for a new Chat Message with multiple parts.
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="parts">Parts the message consists of</param>
	/// <param name="id">Unique guid acting as an identifier. If null, assigned automatically.</param>
	public ChatMessage(ChatMessageRoles role, IEnumerable<ChatMessagePart> parts, Guid? id)
    {
        Role = role;
        Parts = parts.ToList();
        Id = id ?? Guid.NewGuid();
    }

	/// <summary>
	///     Constructor for a new Chat Message.
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="content">The text to send in the message</param>
	/// <param name="id">Unique guid acting as an identifier. If null, assigned automatically.</param>
	public ChatMessage(ChatMessageRoles role, string content, Guid? id)
    {
        Role = role;
        Content = content;
        Id = id ?? Guid.NewGuid();
    }

    [JsonProperty("role")] 
    internal string? rawRole { get; set; }

    /// <summary>
    ///     The role of the message, which can be "system", "assistant", "user" or "function".
    /// </summary>
    [JsonIgnore]
    public ChatMessageRoles? Role
    {
        get => ChatMessageRole.MemberFromString(rawRole);
        set => rawRole = ChatMessageRole.MemberToString(value);
    }
    
    /// <summary>
    ///		The amount of tokens used for this message.
    /// </summary>
    [JsonIgnore]
    public int? Tokens { get; set; }

    /// <summary>
    ///     The content of the message
    /// </summary>
    [JsonProperty("content", NullValueHandling = NullValueHandling.Include)]
    public string? Content { get; set; }

    /// <summary>
    ///     The reason why model refused to respond.
    /// </summary>
    [JsonProperty("refusal")]
    public string? Refusal { get; set; }
    
    /// <summary>
    ///     The parts of the message. When serializing, <see cref="Parts"/> have priority over <see cref="Content"/>
    /// </summary>
    [JsonIgnore]
    public List<ChatMessagePart>? Parts { get; set; }

    /// <summary>
    ///     An optional name of the user in a multi-user chat.
    /// </summary>
    [JsonProperty("name")]
    public string? Name { get; set; }

    /// <summary>
    ///     Assigned in ctor. Use to remove / update messages from conversation.
    /// </summary>
    [JsonIgnore]
    public Guid Id { get; internal set; }

    /// <summary>
    ///     Optional field tool calls
    ///     The name and arguments of tools that should be called, as generated by the model.
    /// </summary>
    [JsonProperty("tool_calls")]
    public List<ToolCall>? ToolCalls { get; set; }

    /// <summary>
    ///     Optional field tool call id.
    ///     This is used after an assistant message with tools.
    /// </summary>
    [JsonProperty("tool_call_id")]
    public string? ToolCallId { get; set; }
    
    /// <summary>
    ///     Optional flag indicating whether <see cref="ToolCallId"/> invocation succeeded.
    /// </summary>
    [JsonIgnore]
    public bool? ToolInvocationSucceeded { get; set; }
    
    /// <summary>
    ///		Flags the message as excluded from the final request.
    /// </summary>
    [JsonIgnore]
    internal bool ExcludeFromRequest { get; set; }

    [JsonIgnore] 
    internal Dictionary<string, ToolCallInboundAccumulator>? ToolCallsDict;
    
    [JsonIgnore]
    internal object? ChatMessageSerializeData { get; set; }
    
    [JsonIgnore]
    internal StringBuilder? ContentBuilder { get; set; }
    
    [JsonIgnore]
    internal Type? ContentJsonType { get; set; }
}
}